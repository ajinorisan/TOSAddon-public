function GetTextFromClipboard()
    local temp_input_path = "../addons/temp_input.txt"
    local temp_output_path = "../addons/temp_output.txt"

    local is_success, result_or_err = pcall(function()
        -- 1. PowerShellでクリップボードの内容を取得し、ファイルに書き出す
        local ps_command_get_clipboard = string.format(
            "Get-Clipboard | Out-File -Encoding UTF8 -FilePath '%s'",
            temp_input_path
        )
        local final_command_get = string.format('start /MIN powershell.exe -Command "%s"', ps_command_get_clipboard:gsub("\"", "\\\""))

        local pipe_get = io.popen(final_command_get, "r")
        if not pipe_get then error("クリップボード取得コマンド実行失敗") end
        pipe_get:read("*a")
        pipe_get:close()

        -- 2. PowerShellで「読んで書き出す」処理を実行 (エンコーディング正規化)
        local ps_command_reencode = string.format(
            "Get-Content -Encoding UTF8 -Path '%s' | Out-File -Encoding UTF8 -FilePath '%s'",
            temp_input_path,
            temp_output_path
        )
        local final_command_reencode = string.format('start /MIN powershell.exe -Command "%s"', ps_command_reencode:gsub("\"", "\\\""))

        local pipe_reencode = io.popen(final_command_reencode, "r")
        if not pipe_reencode then error("エンコード正規化コマンド実行失敗") end
        pipe_reencode:read("*a")
        pipe_reencode:close()
        
        -- 3. 結果ファイルを読み込む
        local file_out = io.open(temp_output_path, "r")
        if not file_out then error("出力ファイル読み込み失敗") end
        local content_with_bom = file_out:read("*a")
        file_out:close()

        -- 4. BOMを削除して純粋なテキストを返す
        local bom_pattern = "^\239\187\191"
        return string.gsub(content_with_bom, bom_pattern, "")
    end)

    if is_success then
        return result_or_err
    else
        print("クリップボード処理中にエラー:", tostring(result_or_err))
        return nil
    end
end

function ShowInputBoxAndCopyToClipboard()
    local is_success, result_or_err = pcall(function()
        -- PowerShellで入力ボックスを表示し、入力内容をクリップボードにセットするコマンド
        local ps_command = "Add-Type -AssemblyName Microsoft.VisualBasic; " ..
                           "$inputText = [Microsoft.VisualBasic.Interaction]::InputBox('送信するテキストを入力してください:', 'テキスト入力', ''); " ..
                           "if ($null -ne $inputText) { $inputText | Set-Clipboard }"

        local final_command = string.format('start /MIN powershell.exe -NoProfile -Command "%s"', ps_command:gsub("\"", "\\\""))

        -- コマンドを実行し、完了を待つ (ユーザーがダイアログを閉じるまで待機)
        local pipe = io.popen(final_command, "r")
        if not pipe then
            error("入力ダイアログの表示に失敗しました。")
        end
        pipe:read("*a")
        local status, err = pipe:close()

        -- ユーザーがキャンセルを押した場合、$inputTextはnullとなりクリップボードは更新されない
        -- closeが成功したか(ユーザーがOK/キャンセルを押したか)を返す
        return status
    end)

    if not is_success then
        print("入力ダイアログ処理中にエラー:", tostring(result_or_err))
    end
    return is_success and result_or_err
end

-- ★★★ 使い方 ★★★
-- 1. OSの入力ダイアログを表示し、ユーザーに入力させる
CHAT_SYSTEM("入力ダイアログを表示します...")
local dialog_success = ShowInputBoxAndCopyToClipboard()

if dialog_success then
    -- 2. クリップボードの内容を取得して処理する
    local text_from_clipboard = GetTextFromClipboard()

    -- 3. 結果をチャットに送信する (クリップボードが空でない、またはキャンセルされていない場合)
    if text_from_clipboard and text_from_clipboard ~= "" then
        CHAT_SYSTEM("テキスト送信成功！")
        ui.Chat("/p " .. text_from_clipboard)
    else
        CHAT_SYSTEM("処理がキャンセルされたか、入力が空でした。")
    end
else
    CHAT_SYSTEM("入力ダイアログの表示に失敗しました。")
end