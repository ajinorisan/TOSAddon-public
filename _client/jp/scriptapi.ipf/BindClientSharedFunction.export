namespace imcresmgr
{

void PrintResAll();

};

namespace option 
{
	void	SetCamType(int dist);
	int	GetCamType();
	
	void	SetDynamicObjectViewDistance(float dist);
	float	GetDynamicObjectViewDistance();
	
	void	SetUseCharacterWaterReflection(int isUse);
	int		IsUseCharacterWaterReflection();
	void	EnableHDR(int isUse);
	
	void	EnableHDRFilmicToneMapping(int isUse);
	void	EnableHDRBlueShift(int isUse);
	void	EnableHDRBloomFilter(int isUse);
	
	void	SetBloomRadis(int resolution);
	void	SetMiddleGray(int resolution);
	void	SetExposure(int resolution);
};

class INV_ITEM_INFO_C
{
public:
	int					type;
	int					count;
	int					invIndex;
	imcIES::IObject*	object;
};

class INV_ITEM_LIST_INFO
{
public:
	int						Count();
	INV_ITEM_INFO_C*		Element(int index);
};

class EQUIP_ITEM_INFO_C
{
public:
	int					type;
	int					equipSpot;
	imcIES::IObject*	object;
};

class EQUIP_ITEM_LIST_INFO
{
public:
	int						Count();
	EQUIP_ITEM_INFO_C*		Element(int index);
};

struct MARKET_ITEM_INFO {
	__int64		marketID;
	char		name[CHAR_NAME_LEN];
	DWORD		type;
	DWORD		count;
	DWORD		remainTime;
	DWORD		price;
	BYTE		level;

	imcIES::IObject* object;
};

struct MAIL_INFO {
	__int64		mailID;
	char		fromName[CHAR_NAME_LEN];
	int			remainTime;
	int			mailRead;
	int			canReturn;
};

struct MAIL_DATA {
	__int64		mailID;
	int			itemType;
	int			itemCount;
	int			itemPrice;
	int			visCount;
	CHAR		text[DEFAULT_TEXT_LEN];
};

class MARKET_LIST_INFO
{
public:
	int						Count();
	MARKET_ITEM_INFO		Element(int index);
};

class MAIL_LIST_INFO
{
public:
	int						Count();
	MAIL_INFO				Element(int index);
};

class SKILL_INFO_C
{
public:
	int		type;
	int		usable;
	int		coolTime;	
	int		GetTotalCoolDownTime();
	int		GetCurrentCoolDownTime();	
};

class SKILL_LIST_INFO
{
public:
	int						Count();
	SKILL_INFO_C*			Element(int index);
};

class QUICKSLOT_INFO {
	const char*	category;
	int			type;
	int			ext;
};

class QUICKSLOT_LIST_INFO
{
public:
	int						Count();
	QUICKSLOT_INFO*			Element(int index);
};

class SHOP_ITEM_INFO
{
public:
	int		type;
	int		count;
	int		price;
};

class SHOP_ITEM_LIST_INFO
{
	int					Count();
	SHOP_ITEM_INFO*		Element(int index);
};

namespace hotKeyTable {
	const char*			GetHotKeyString(const char* id);
};

class BASE_STAT
{
	int		HP;
	int		maxHP;
	int		SP;
	int		maxSP;
};

class BUFF
{
	int		buffID;
	int		arg1;
	int		arg2;
	int		time;
};

namespace session
{

int GetMyHandle();
INV_ITEM_LIST_INFO*		GetInvItemList();
INV_ITEM_INFO_C*		GetInvItem(int invIndex);
EQUIP_ITEM_LIST_INFO*	GetEquipItemList();
SKILL_LIST_INFO*		GetSkillList();
SKILL_INFO_C*			GetSkill(int type);
SHOP_ITEM_LIST_INFO*	GetShopItemList();
int						GetEXP();
int						GetMaxEXP();
const char *			GetMapName();

}

namespace market
{

MARKET_LIST_INFO*		GetMarketList();
MARKET_LIST_INFO*		GetSellList();

}

namespace mail
{

MAIL_LIST_INFO*			GetMailList();
MAIL_DATA*				GetSelectMailData();

bool					IsNewMail();

}

class QUEST_LIST_INFO
{
	int					Count();
	int					Element(int index);
};

class QUEST_STATE
{
	int		questID;
	int		killCount[3];
	int		propValue[3];
	int     failed;
};

class QUEST_STATE_C : public QUEST_STATE
{
	int			isFinish;

	int			GetTargetPropertyCount();
	const char*	GetTargetPropertyCaption(int index);
	int			IsTargetPropertyFinish(int index);
	int         GetTargetPropertyValue(int index);
	int         GetTargetPropertyEndValue(int index);
		
	int			GetKillCount();
	const char*	GetKillCaption(int index);
	int			GetKill(int index);
	int			GetKillTotal(int index);

	int			GetTargetItemCount();
	const char*	GetTargetItemCaption(int index);
	int			GetTargetItem(int index);
	int			GetTargetItemTotal(int index);

	int			GetDropItemCount();
	const char*	GetDropItemCaption(int index);
	int			GetDropItem(int index);
	int			GetDropItemTotal(int index);
	
	int			GetRewardPropertyCount();
	const char*	GetRewardPropertyCaption(int index);

	int			GetRewardItemCount();
	const char*	GetRewardItemCaption(int index);
	
};

class QUEST_PROGRESS_LIST_INFO
{
	int					Count();
	QUEST_STATE_C*		Element(int index);
};

class QUEST_COMPLETE_LIST_INFO
{
	int					Count();
	int					Element(int index);
};

namespace quest
{

QUEST_LIST_INFO*		GetEnableList(const char* uniqueName);
QUEST_LIST_INFO*		GetProgressList(const char* uniqueName);
QUEST_LIST_INFO*		GetFinishList(const char* uniqueName);

QUEST_PROGRESS_LIST_INFO*	GetProgressList();
QUEST_COMPLETE_LIST_INFO*	GetCompleteList();

QUEST_STATE_C*			GetProgress(int questID);

};

struct POINT
{
    int  x;
    int  y;
};

namespace info
{

const char*	GetName(int handle);
BASE_STAT*	GetStat(int handle);
int			GetIFP(int handle);
int			GetMIFP(int handle);
BUFF*		GetBuff(int handle, int buffType);
int			GetBuffCount(int handle);
BUFF*		GetBuffIndexed(int handle, int index);
int			GetLevel(int handle);
int			IsBattleMode(int handle);
const char*	GetStanceName(int handle);

int         IsPC(int handle);
int         IsMonster(int handle);

POINT		GetPositionInMap(int handle, int mapWidth, int mapHeight);
POINT		GetPositionInScreen(int handle);
float		GetAngle(int handle);

};

namespace path
{
	const char*				GetDataPath();
};

void	PlayIdleAnim(int objHandle, const char* fileName);

bool	SetAnimationReaction(int obj, const char* reaction, const char* configType);
bool	SetLookAtReaction(int obj, const char* reaction, int lookattime);
bool	SetSoundReaction(int obj, const char* reaction, int value);
bool	SetTextReaction(int obj, const char* reaction, int value);

bool	RemoveAnimationReaction(int obj);
bool	RemoveLookAtReaction(int obj);
bool	RemoveSoundReaction(int obj);
bool	RemoveTextReaction(int obj);

namespace movie
{
	void	Pc(int handle, int job, int gender, int x, int y, int cell, float dirX, float dirY);
	void	NPC(int handle, int type, int x, int y, int cell, float dirX, float dirY);
	void	Equip(int handle, int iSpot, int itemID);
	void	Stance(int handle, int stanceID, int attackID);
	void	PlayAnim(int handle, const char* animID, float speed);
	void	PlayEffect(const char* effectName, float x, float y, float z, float scale);
	void	PlaySound(const char* soundName, float x, float y, float z);
	void	MoveTo(int handle, float speed, int x, int y, int cell);
	void	Rotate(int handle, float x, float z);
};