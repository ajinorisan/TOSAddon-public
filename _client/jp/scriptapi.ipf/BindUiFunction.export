namespace ui
{

typedef int BOOL;
typedef unsigned int DWORD;

enum ALIGN_SNAP 
{
	AS_NONE,		/**<  정렬을 사용하지 않습니다. 기준이 없는것으로 취급됩니다. */
	AS_LEFT,		/**<  First 에서는 기준 오브젝트의 좌측, Second 에서는 기준 오브젝트의 좌측끝 값을 기준으로 합니다. */
	AS_RIGHT,		/**<  First 에서는 기준 오브젝트의 우측, Second 에서는 (기준 오브젝트의 우측끝 - 해당 오브젝트의 너비) 값을 기준으로 합니다. */
	AS_CENTER,		/**<  First 에서는 사용 불가, Second 에서는 기준 오브젝트의 너비 또는 높이의 중심값을 기준으로 합니다. */
	AS_TOP,			/**<  First 에서는 기준 오브젝트의 위측, Second 에서는 기준 오브젝트의 위측끝 값을 기준으로 합니다. */
	AS_BOTTOM		/**<  First 에서는 기준 오브젝트의 아래측, Second 에서는 (기준 오브젝트의 아래끝 - 해당 오브젝트의 높이) 값을 기준으로 합니다. */
};

enum ALIGN_HORZ
{
	AH_LEFT,
	AH_CENTER,
	AH_RIGHT
};

enum ALIGN_VERT
{
	AV_TOP,
	AV_MIDDLE,
	AV_BOTTOM
};

class IObject;

class CObject : public IObject
{
public:
	const char* GetName();
	int			GetWidth();
	int			GetHeight();
	int			GetX();
	int			GetY();	
	int			GetGlobalX();
	int			GetGlobalY();
	void		Move(int x, int y);
	void		SetOffset(int x, int y);
	void		Resize(int width, int height);
	
	void		SetSnap(IObject* pTargetObject, ALIGN_SNAP alignFirst, ALIGN_SNAP alignSecond);
	void		SetAlign(ALIGN_HORZ horzAlign, ALIGN_VERT vertAlign);
	
	void		Invalidate();
	void		ShowWindow(int isShow);
	void		ShowWindowToggle();
	void		SetEnable(BOOL enable);
	BOOL	IsVisible();
	
	int			GetChildCount();
	CObject*	GetChild(const char* childName);	
	CObject*	GetChildRecursively(const char* childName);
	CObject*	GetChild(int index);
	CObject*	GetParent();
	CFrame*		GetTopParentFrame();
	
	void		SetText(const char* text);
	void		SetTextByKey(const char* key, const char* value);
	void		SetValueByKey(const char* key, int value);	
	void		ClearText();	
	const char*	GetText();
	
	void		SetLBtnDblClickScp(const char* scpName);
	void		SetLBtnDblClickArgStr(const char* argStr);
	void		SetLBtnDblClickArgNum(int argNum);
	
	void		SetRBtnDownScp(const char* scpName);
	void		SetRBtnDownArgStr(const char* argStr);
	void		SetRBtnDownArgNum(int argNum);

	void		SetLBtnDownScp(const char* scpName);
	void		SetLBtnDownArgStr(const char* argStr);
	void		SetLBtnDownArgNum(int argNum);

	void		SetLBtnUpScp(const char* scpName);
	void		SetLBtnUpArgStr(const char* argStr);
	void		SetLBtnUpArgNum(int argNum);
		
	const char* GetRBtnDownArgStr();
	int			GetRBtnDownArgNum();
	const char* GetLBtnDownArgStr();
	int			GetLBtnDownArgNum();
	const char*	GetLBtnDblClickArgStr();
	int			GetLBtnDblClickArgNum();
	
	void		SetTooltipType(const char* typeName);
	void		SetTooltipData(const char* key, const char* text);
	
	CObject*	CreateControlSet(const char* typeName, const char* name, int x, int y);
};

class CFadeManager
{
public:
	void		Enable(bool isUse);		
		
	void		SetClipScale(bool isClip);
	
	void		SetBasePosition(int x, int y);	
	void		SetPivot(float refX, float refY);
	
	void		SetBlend(float blendEndTime);
	void		SetScaleX(float startScaleX, float scaleEndTime);
	void		SetScaleY(float startScaleY, float scaleEndTime);
	void		SetMove(float moveEndTime);
	void		SetRotation(float startAngle, int spinCount, float rotEndTime);
};

class CImageItem
{
public:
		
	void		SetCaption(const char* caption);

	void		SetPos(int x, int y);
	void		SetAngle(float angle);
	void		SetAlphaBlend(float alpha);
	void		SetScale(float scaleWidth, float scaleHeight);		
	void		SetSize(int imageWidth, int imageHeight);	

	void		SetLifeTime(float lifeTime);
	void		SetMoveDest(int x, int y);	
	void		SetAngleSpd(float angleSpeed);
	void		SetScaleDest(float scaleWidth, float scaleHeight);
	void		SetAlphaBlendDest(float alphaDest);
	
	
	void		SetTickTime(float tickTime);	
	void		SetImage(const char* imageName);
	void		AddImage(const char* imageName);
};

class CFrame : public CObject
{
public:
	void		SetTitleName(const char* titleName);	
	void		SetImage(const char* imageName);	
	void		SetDuration(float durationTime);
	void		SetBlend(int alpha);
	
	void		ShowFrame(BOOL isDrawFrame);
	void		ShowTitleBar(BOOL isShow);
	void		ShowTitleBarFrame(BOOL isShowFrame);
	void		EnableResize(BOOL isResizeEnable);
	
	void		SetOpenScript(const char* funcName);
	void		SetCloseScript(const char* funcName);
	
	CFadeManager* GetFadeInManager();
	CFadeManager* GetFadeOutManager();
};

class CContextMenuFrame : public CObject
{
public:
				CContextMenuFrame();
	void		AddMenuItem(const char* caption, const char* scp, const char* argStr = 0, int argNum = 0, bool isClosedFrame = TRUE, CContextMenuFrame* pLink = NULL);
};

class CGroupBox : public CObject
{
public:
		
	BOOL		ValidateControl(const char* name);	
	void		DeleteAllControl();
	void		DeleteControl(const char* name);	
	void		UpdateData();
};

class CListBox : public CObject
{
public:
	
	void		SelectItem(int index);
	void		DeSelectItem(int index);
	void		DeSelectItemAll();
	
	int			GetSelItemCount() const;
	int			GetSelItemIndex();
	std::string GetSelItemText();
	std::string GetSelItemText(int index, int col);
	int			GetSelItemValue();
	void		SetSelItemText(const char* text);
	void		Advance();
	void		Rewind();
	void		AddItem(int column, const char* text, int value = 0);
	void		AddItem(const char* text, int value = 0);
	void		SetItem(int index, int columnIndex, const char* text);
	void		SetItemEnable(int itemIndex, int columnIndex, BOOL enable);
	int			AddColumn(const char* caption, int width = 0);
	void		SetColumnName(int columnIndex, const char* caption);
	void		ClearItemAll();	
};

class CDropList : public CObject
{
public:
	void	AddItem(const char* key, const char* caption, int value = 0, const char* scp = NULL);
	void	SelectItem(int curItem);
	void	ClearItems();
};

class CTabControl : public CObject
{
public:

	int			GetSelectItemIndex() const;
	const char*	GetSelectItemName();
	int			GetItemCount() const;
	void		SelectTab(int tabIndex);
	void		AddItem(const char* caption);
};

class CGauge : public CObject
{
	void		SetPoint(float curPoint, float maxPoint);
	void		SetProcessMode(bool isIncreasing);
	void		SetTotalTime(float totalTime);
	void		AddTotalTime(float addTime);
	void		SetBarColor(unsigned int color);
	void		SetText(const char* text, const char* fontName, const char* horzAlign, const char* vertAlign, int offsetX, int offsetY);
	
	void		SetBlink(float duration, float freqTime, DWORD colorTone);
	void		ReleaseBlink();
};

class CTextView : public CObject
{
public:
	void		Clear();
	void		AddText(const char* text,  const char*fontName = NULL);
};

typedef INT_PTR TREEITEM;
class CTreeControl : public CObject
{
public:
	void			Clear();
	
	void			SetNodeFont(TREEITEM node, const char* fontName);
	
	TREEITEM		Add(const char* caption, int value = 0);
	TREEITEM		Add(TREEITEM parentTreeItem, const char* caption, int value = 0);
	int				Delete(TREEITEM treeItem);
	int				DeleteByValue(int value);
	void				DeleteByCaption(const char* caption);	
	
	int				GetSelectCount();
	TREEITEM		GetSelect(int index = 0);	
	int				Select(TREEITEM treeItem);
	
	const char*		GetItemCaption(TREEITEM treeItem);
	int				GetItemValue(TREEITEM treeItem);

	TREEITEM		FindByValue(int value);
	TREEITEM		FindByCaption(const char* caption);
	TREEITEM		FindByValue(TREEITEM pNode, int value);
	TREEITEM		FindByCaption(TREEITEM pNode, const char* caption);
	
	void			OpenNodeAll();
	void			CloseNodeAll();
	
	int				GetChildItemCount(TREEITEM treeItem);
	
	int				IsExist(TREEITEM treeItem);
};

class CCheckBox : public CObject
{
public:
	void		SetCheck(BOOL check);
	int			IsChecked();
};

class CStaticText : public CObject
{
public:
};

class CRichText : public CObject
{
public:
};

class CEditControl : public CObject
{
public:	
	void		SetNumberMode(int isNumberMode);
	void		SetMaxNumber(__int64 maxNumber);
	void		SetEnterKeyScp(const char* scpName);
	
	void		Focus();
	void		AcquireFocus();	
	void		ReleaseFocus();
};

class CButton : public CObject
{
public:
	void		SetText(const char* text);
};

class CRadioButton : public CButton
{
public:
	int		IsChecked();
};

class CPicture : public CObject
{
public:
	void		SetImage(const char* imageName);
	void		SetImageOffset(int offsetX, int offsetY);
	void		SetImageSize(int imageWidth, int imageHeight);	
	int		GetImageWidth();
	int		GetImageHeight();
	
	imcFlash::IFlashObject*	GetFlashObject();	
};

class CFlashControl : public CObject
{
public:
	imcFlash::IFlashObject*	GetFlashObject();	
};
 
class ICON_INFO
{
	ICON_INFO();
	const char* imageName;
	const char*	category;
	int			type;
	int			ext;	
	int			count;
};

class CIcon : public CObject
{
public:
	CIcon();
	void		SetImage(const char* imageName);
	void		Set(const char* imageName, const char* category, int type, int ext);
	ICON_INFO*	GetInfo();
	void		SetIESID(const char* id);
	
	void		SetEnable(int enable);
	
	void		SetOnCoolTimeEndScp(const char* funcName);
	void		SetOnCoolTimeEndArgStr(const char* argStr);
	void		SetOnCoolTimeEndArgNum(int argNum);
	
	void        SetOnCoolTimeUpdateScp(const char* funcName);
	
	void		SetOnEnableScp(const char* funcName);
	void		SetOnEnableArgStr(const char* argStr);
	void		SetOnEnableArgNum(int argNum);
		
	void		SetCoolTimeMode(bool isRightRotation, bool isFill);
	void		SetCoolTime(int totalTime);
	void		SetCoolTime(int leftTime, int totalTime);
	float		GetCoolTimeRate();
	
	void		SetText(const char* text);
	void		SetText(const char* text, const char* fontName, const char* horzAlign, const char* vertAlign, int offsetX, int offsetY);
	
	void		SetDumpScp(const char* dropScp);
	void		SetDumpArgNum(int argNum);
	
	void        SetEnableUpdateScp(const char* funcName);
};

class CSlot : public CObject
{
public:
	void		SetIcon(IObject* icon);
	CIcon*		GetIcon();
	void		ClearIcon();
	int			GetSlotIndex();	
	BOOL		IsCursorOnResize();
	
	void		SetText(const char* text);
	void		SetText(const char* text, const char* fontName, const char* horzAlign, const char* verAlign, int offsetX, int offsetY);
};

class CSlotSet : public CObject
{
public:	
	
	int					GetSlotCount();
	CSlot*				GetSlotByIndex(int index);
	CSlot*				GetSlot(const char* name);
	CIcon*				GetIconByIndex(int index);
	CIcon*				GetIcon(const char* name);	
	
	void				ClearSelectedSlot();
	void				ClearIconAll();
	
	int					GetSelectedSlotCount();
	CSlot*				GetSelectedSlot(int index);
	int					GetSelectedIndex(int index);
	
	void				EnableSelection(BOOL enable);
	void				SetMaxSelectionCount(int count);
};

class CSlideBar : public CObject
{
public:
	void		SetLevel(int level);
	void		SetMaxSlideLevel(int maxLevel);
	void		SetMinSlideLevel(int minLevel);
	int			GetLevel() const;
	int			GetMaxLevel() const;
};

class CControlSet : public CObject
{
public:	
	void		SetEnableSelect(BOOL isEnable);
	void		SetSelectGroupName(const char* groupName);
	DWORD		GetSelectGroupIndex();
	void		Select();
	void		Deselect();
	BOOL		IsSelected();
};

const char*		GetUIPath();
void			SetUIPath(const char* path);

CObject*		CreateFrameFromXML(const char* fullPath);

CFrame*			GetFrame(const char* frameName);

void			OpenFrame(const char* frameName);
void			CloseFrame(const char* frameName);
void			ToggleFrame(const char* frameName);

void			MsgBox(const char* msg);
void			MsgBox(const char* caption, const char* title, const char* scpYes, const char* scpNo);
void			MsgBox(const char* caption, const char* scpYes, const char* scpNo);
void			Log(const char* msg);

CIcon*			GetLiftIcon();

void			HideUI(BOOL isHide);
BOOL			IsHideUIMode();

int				GetClientWidth();
int				GetClientHeight();

int				GetCursorPosX();
int				GetCursorPosY();

CImageItem*		CreateImageItem(const char* name, int x, int y, const char* caption = NULL);	
void			DeleteImageItem(const char* name);	
void			DeleteAllImageItem();
int				GetImageItemCount();
CImageItem*		GetImageItem(const char* name);

IObject*		AddTextFrame(const char* frameName, RECT& rect, GRAVITY_HORZ horzAlign = LEFT, GRAVITY_VERT vertAlignP = TOP);
void			DestroyTextFrame(const char* frameName);
void			AddText(const char* frameName, const char* msgText, DWORD color = 0x00000000, int defaultSize = 0);

IObject*		CreateContextMenu(const char* name, const char* title, RECT& rect, BOOL isFixPosition = FALSE);
void			AddContextMenuItem(IObject* pContextMenuFrame, const char* caption, const char* scp, const char* argStr = NULL, int argNum = 0, BOOL isCloseBySelect = TRUE, IObject* pLinkFrame = NULL);
void			OpenContextMenu(IObject* pContextMenuFrame);

};
