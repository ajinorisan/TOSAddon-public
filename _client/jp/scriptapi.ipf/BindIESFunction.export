namespace imc
{

class CTokenizer
{
	CTokenizer();
	CTokenizer(const char * szBuffer);
	~CTokenizer();
	void			Init(const char * szBuffer);
	char*			GetString(int index);
	int				GetNumber(int index);		
};

FILE*	Open(const char* fileName, const char* mode);
void	Write(FILE* ioFile, const char* buf);
void	Close(FILE* ioFile);
const char* Read(FILE* ioFile);

};

const char*		GetClassString(const char* idspace, const char* className, const char* propertyName);
float			GetClassNumber(const char* idspace, const char* className, const char* propertyName);

const char*		GetClassString(const char* idspace, int classID, const char* propertyName);
float			GetClassNumber(const char* idspace, int classID, const char* propertyName);

const char*		GetClassStringByIndex(const char* idspace, int index, const char* propertyName);
float			GetClassNumberByIndex(const char* idspace, int index, const char* propertyName);

const char*		GetPropertyString(const char* idspace, const char* className, const char* propertyName);
float			GetPropertyNumber(const char* idspace, const char* className, const char* propertyName);

int				GetClassCount(const char* idspace);

namespace imcIES
{


class IClassList {
public:
	int			Count();
	IClass*		GetByIndex(int index);
	IClass*		GetClass(int classID);
};

IClassList *	GetClassList(const char* idspace);

void			ShowLog(bool show);

class IClass {
public:
	bool 		HasSubClassList();
	IClassList*	GetSubClassList();
};

int				GetINT(imcIES::IClass* pClass, const char* propertyName);
float			GetFloat(imcIES::IClass* pClass, const char* propertyName);
const char*		GetString(imcIES::IClass* pClass, const char* propertyName);

};